@import 'styles/colors.scss';

// General
$animation-time: 0.3s;
$hover-opacity: .7;
$active-opacity: .6;

$burger-width: 32px;
$burger-item-height: 2px;

// Elements styles
%tile {
  border-radius: 10px;
  padding: 20px;
  background-color: $color-white;
}

%tile-title {
  font-size: 18px;
  font-weight: 700;
  font-family: Quicksand;
  letter-spacing: .3px;
  color: #323232;
}

%button {
  padding: 10px 15px;
  border-radius: 10px;
  cursor: pointer;
  user-select: none;
  // TODO: BEGIN
  // TODO: This is temporary fallback to cleanup nested styles of current <CustomButton /> that should be refactored
  // TODO: to avoid a lot of boilerplate code, more clear markup and to have Single Source of Truth for whole application, etc.
  .fl-button {
    padding: 0;
  }
  // TODO: END
  transition: color $animation-time, background-color $animation-time, border-color $animation-time;
}

// TODO: make styles for primary button
%button-primary {
  @extend %button;
  background-color: $color-button-submit;
  color: $color-white;
  margin-left: 20px;
  font-size: 18px;
  &:hover,
  &:focus {
    background-color: $color-button-hover;
  }
  &:active {
    background-color: $color-button-click;
  }
}

%button-secondary {
  @extend %button;
  background-color: $color-white;
  color: $color-button-submit;
  border: 1px solid $color-button-submit;
  margin-right: 20px;
  &:hover,
  &:focus {
    background-color: $color-button-hover;
    color: $color-white !important;
    border: 1px solid $color-button-hover;
    .fl-buttonTextCenter {
      color: $color-white;
    }
  }
  &:active {
    background-color: $color-button-click;
  }
}

%button-link {
  display: flex;
  justify-content: center;
  align-items: center;
  text-decoration: none;
}

// TODO: make styles for forms
%form-wrapper {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  max-width: 400px;
  width: 100%;

}

%form-title {
  font-size: 29px;
  letter-spacing: 0.4px;
  color: $main-modal-color;
  width: auto;
  display: flex;
  justify-content: center;
  padding-top: 30px;
  padding-bottom: 30px;
}

%buttons-container {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  max-width: 400px;
  width: auto;
  padding-top: 30px;
}

%error-message-container {
  display: flex;
  justify-content: flex-end;
  position: absolute;
  right: 0;
}

%error-message {
  position: relative;
  color: $color-button-error;
  font-weight: 500;
  font-family: Quicksand;
  font-size: 12px;
  margin-bottom: -2px;
}

// TODO: make styles for generic spinner
%generic-spinner {
  display: block !important;
  margin: 13px 0 0 -118px;
  opacity: 0;
  position: absolute;
  animation: pulsate 1s ease-out;
  animation-iteration-count: infinite;
}

%link {
  color: $color-link;
  cursor: pointer;
  outline: none;
  text-decoration: none;
  font-weight: 600;
  transition: color $animation-time;
  &:focus {
    outline: auto;
  }
  &:hover,
  &:focus {
    text-decoration: none;
    color: $color-link-hover;
  }
  &:active {
    text-decoration: none;
    color: $color-link-active;
  }
}

%svg-hover-focus-active {
  fill: $color-link;
  transition: fill $animation-time;
  &:hover,
  &:focus {
    fill: $color-link-hover;
  }
  &:active {
    fill: $color-link-active;
  }
}

%hover-focus-active-opacity {
  transition: opacity $animation-time;
  &:hover,
  &:focus {
    opacity: $hover-opacity;
  }
  &:active {
    opacity: $active-opacity;
  }
}

// Animations
@keyframes fade-out {
  0% {
    opacity: 1;
    visibility: visible;
  }
  100% {
    opacity: 0;
    visibility: hidden;
  }
}

@keyframes fade-in {
  0% {
    opacity: 0;
    visibility: hidden;
  }
  100% {
    opacity: 1;
    visibility: visible;
  }
}

@keyframes rotate {
  0% {
    transform: translate3d(0, 0, 0) rotate(0);
  }
  100% {
    transform: translate3d(0, 0, 0) rotate(360deg);
  }
}

// functions
@function linear-dynamic-size-relate-vw($sizeAtWidth1, $sizeAtWidth2, $width1, $width2) {
  $a: ($sizeAtWidth2 - $sizeAtWidth1) / ($width2 - $width1);
  $b: $sizeAtWidth2 - $a * $width2;
  @return calc(#{$a * 100}vw + #{$b}px);
}

@function linear-dynamic-size-relate-vh($sizeAtHeight1, $sizeAtHeight2, $height1, $height2) {
  $a: ($sizeAtHeight2 - $sizeAtHeight1) / ($height2 - $height1);
  $b: $sizeAtHeight2 - $a * $height2;
  @return calc(#{$a * 100}vh + #{$b}px);
}

// helpers
%ghost-vertical-align {
  &:before {
    content: "";
    display: inline-block;
    vertical-align: middle;
    height: 100%;
    width: 0;
  }
}

// Media breakpoints
$media-tablet-width: 1280px;

// zIndexes
$zIndex-content-overlay: 9;

%custom-scrollbar {
  &::-webkit-scrollbar {
    width: 2px;
    height: 50px;
  }

  &::-webkit-scrollbar-track {
    background: $scrollbar-track;
    width: 2px;
  }

  &::-webkit-scrollbar-thumb {
    background-color: $scroll-bar-thumb;
  }
}